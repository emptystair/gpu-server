version: '3.8'

services:
  gpu-ocr-server:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: gpu-ocr-server:production
    container_name: gpu-ocr-server
    restart: unless-stopped
    
    # GPU support
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - ENVIRONMENT=production
      
      # Server configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - SERVER_WORKERS=1
      - SERVER_LOG_LEVEL=INFO
      - SERVER_LOG_FORMAT=json
      
      # OCR configuration
      - OCR_USE_TENSORRT=true
      - OCR_MAX_BATCH_SIZE=50
      - OCR_GPU_MEMORY_BUFFER_MB=500
      
      # Cache configuration
      - CACHE_TYPE=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Security
      - SERVER_SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - SERVER_ENABLE_API_KEY=${ENABLE_API_KEY:-false}
    
    ports:
      - "8000:8000"  # API
      - "9090:9090"  # Metrics
    
    volumes:
      # Persistent data
      - ./logs:/app/logs
      - ./model_cache:/app/model_cache
      - ./tensorrt_engines:/app/tensorrt_engines
      - ocr-cache:/app/cache
      - ocr-temp:/app/temp
      
      # Config override (optional)
      - ./config/production.yaml:/app/config/production.yaml:ro
    
    depends_on:
      - redis
    
    networks:
      - ocr-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '16'
          memory: 32G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: ocr-redis
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
    
    networks:
      - ocr-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Optional: Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: ocr-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    
    depends_on:
      - gpu-ocr-server
    
    networks:
      - ocr-network
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ocr-prometheus
    restart: unless-stopped
    
    ports:
      - "9091:9090"
    
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    
    networks:
      - ocr-network
    
    depends_on:
      - gpu-ocr-server

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ocr-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    networks:
      - ocr-network
    
    depends_on:
      - prometheus

networks:
  ocr-network:
    driver: bridge

volumes:
  ocr-cache:
  ocr-temp:
  redis-data:
  nginx-cache:
  prometheus-data:
  grafana-data: